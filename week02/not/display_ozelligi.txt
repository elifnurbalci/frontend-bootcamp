Display Özelliği (block, inline, inline-block, flex, grid vb.)
CSS Display Özelliği ve Değerleri

I. Display Özelliği Nedir?

CSS Display özelliği, bir HTML elemanının nasıl görüntüleneceğini belirlemek için kullanılır. Elemanların blok düzeninde, satır içi düzeninde veya diğer düzenlerde görüntülenmesini kontrol eder. Display özelliği, HTML elemanlarını düzenlemenin yanı sıra içerik akışını kontrol etmek ve sayfa düzenini oluşturmak için önemli bir rol oynar.

II. Block Düzen (display: block):

block değeri, elemanların bir satırda tek başına yer alacağı ve satırın tam genişliğini kaplayacağı anlamına gelir. Yani, bir blok düzenine sahip bir eleman diğer elemanların yanına yerleştirilmez ve bir sonraki elemandan alt satıra geçer.

Örnek:

div {
     display: block;
     width: 100px;
     height: 100px;
     background-color: #007BFF;
}
Örnek 2:: Block Düzen (display: block)

Bu örnek, block düzenine sahip iki div elemanını yan yana koyduğumuzda birbirinden ayrıldığını ve alt satıra geçtiğini gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .block-div {
            display: block;
            width: 100px;
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
            margin-right: 20px;
        }
    </style>
</head>
<body>
    <div class="block-div">Blok Div 1</div>
    <div class="block-div">Blok Div 2</div>
</body>
</html>    
Blok Div 1

Blok Div 2

III. Inline Düzen (display: inline):

inline değeri, elemanların satır içinde, içeriği tarafından sınırlı olarak görüntüleneceği anlamına gelir. Yani, inline düzende bir eleman diğer elemanların yanına sığacak şekilde görüntülenir ve satırın tam genişliğini kaplamaz.

Örnek:

span {
     display: inline;
     font-size: 18px;
     color: #FF5733;
}
Örnek 2: Inline Düzen (display: inline)

Bu örnek, inline düzenine sahip iki span elemanını yan yana koyduğumuzda birbirlerine yapışık olduğunu ve aynı satırda olduğunu gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .inline-span {
            display: inline;
            font-size: 18px;
            color: #FF5733;
        }
    </style>
</head>
<body>
    <span class="inline-span">Inline Span 1</span>
    <span class="inline-span">Inline Span 2</span>
</body>
</html>
IV. Inline-Block Düzen (display: inline-block):

inline-block değeri, bir elemanın satır içinde görüntüleneceği, ancak blok düzenine özgü özelliklere sahip olacağı anlamına gelir. Yani, inline-block düzende bir eleman diğer elemanların yanına sığacak şekilde görüntülenir ve içerik kutusu, blok düzende olduğu gibi genişlik ve yükseklik özelliklerini alır.

Örnek:

button {
     display: inline-block;
     padding: 10px 20px;
     background-color: #007BFF;
     color: #FFFFFF;
     border: none;
     border-radius: 5px;
}
Örnek 2: Inline-Block Düzen (display: inline-block)

Bu örnek, inline-block düzenine sahip üç düğmeyi yan yana koyduğumuzda, hem satır içi olmaları hem de blok düzenine özgü özelliklere sahip olmaları nedeniyle satırda sıralı bir şekilde göründüğünü gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .inline-block-button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007BFF;
            color: #FFFFFF;
            border: none;
            border-radius: 5px;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <button class="inline-block-button">Düğme 1</button>
    <button class="inline-block-button">Düğme 2</button>
    <button class="inline-block-button">Düğme 3</button>
</body>
</html>
V. Flex Düzen (display: flex):

flex değeri, bir elemanın esnek bir kutu içinde görüntülenmesini sağlar. Flex düzeni, içerikleri uygun bir şekilde düzenlemek ve hizalamak için kullanılır. Flex düzeni, içeriğin hizalanma, sıralama ve aralama gibi özelliklerini kontrol etmeyi kolaylaştırır.

Örnek:

.container {
     display: flex;
     justify-content: space-between;
    /* İçerikleri kenarlara hizalama */
}
Örnek 2: Flex Düzen (display: flex)

Bu örnek, flex düzenine sahip bir konteyner içinde yer alan üç kutuyu hizalamak ve aralarına boşluk bırakmak için flex düzenini kullanır.

<!DOCTYPE html>
<html>
<head>
    <style>
        .flex-container {
            display: flex;
            justify-content: space-between; /* İçerikleri kenarlara hizalama */
        }

        .flex-box {
            width: 100px;
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="flex-container">
        <div class="flex-box">Kutu 1</div>
        <div class="flex-box">Kutu 2</div>
        <div class="flex-box">Kutu 3</div>
    </div>
</body>
</html>
VI. Grid Düzen (display: grid):

grid değeri, bir elemanın ızgara düzeninde görüntülenmesini sağlar. Grid düzeni, içerikleri satır ve sütunlar arasında düzenlemek ve hizalamak için kullanılır. Grid düzeni, karmaşık düzenleri oluşturmayı ve düzenleri dinamik olarak kontrol etmeyi sağlar.

Örnek:

.container {
     display: grid;
     grid-template-columns: 1fr 1fr 1fr;
    /* 3 eşit genişlikte sütun oluşturma */
     grid-gap: 10px;
    /* Sütunlar arasına 10px boşluk bırakma */
}
Örnek 2: Grid Düzen (display: grid)

Bu örnek, grid düzenine sahip bir konteyner içinde iki sütun oluşturarak içeriği düzenler.

<!DOCTYPE html>
<html>
<head>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr; /* İki eşit genişlikte sütun oluşturma */
            grid-gap: 10px; /* Sütunlar arasına 10px boşluk bırakma */
        }

        .grid-box {
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="grid-box">Kutu 1</div>
        <div class="grid-box">Kutu 2</div>
    </div>
</body>
</html>