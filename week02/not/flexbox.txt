Flexbox Layout
CSS Flexbox Layout

I. Flexbox Nedir?

CSS Flexbox Layout, web sayfalarının düzenini oluşturmak ve içerikleri esnek bir şekilde hizalamak için kullanılan bir CSS düzen modelidir. "Flexbox" olarak da bilinen bu yöntem, içeriği satır ve sütunlarda düzenleyebilme yeteneği sunar. Flexbox, responsive (duyarlı) tasarımlar oluşturmak ve sayfa düzenini dinamik olarak değiştirmek için ideal bir araçtır.

II. Flex Container ve Flex Items

Flexbox yapısında iki önemli terim vardır: "Flex Container" ve "Flex Items".

- Flex Container: Flex Container, içerisindeki elemanları esnek bir düzen içinde düzenlemek için kullanılan bir HTML elemanıdır. Bir elemanı Flex Container yapmak için, onun üzerine display: flex; özelliğini uygulamamız gerekir.

- Flex Items: Flex Items, Flex Container içindeki elemanlardır ve bu elemanlar Flex Container tarafından yönetilen esnek düzende hizalanır. Flex Container'ın doğrudan alt öğeleri Flex Items olarak kabul edilir.

III. Flex Container İçin Özellikler

Bir Flex Container'ı oluşturmak için kullanılan temel özellikler şunlardır:

- display: flex;: Bir HTML elemanını Flex Container haline getirmek için kullanılır.

- flex-direction: Flex Items'ların düzenlenme yönünü belirler (row, column, row-reverse veya column-reverse).

- flex-wrap: Flex Items'ların sığmayacak kadar büyük olduğunda nasıl sıralanacağını belirler (nowrap, wrap, wrap-reverse).

- flex-flow: flex-direction ve flex-wrap özelliklerini tek bir özellik olarak belirlemek için kullanılır.

- justify-content: Flex Container içindeki elemanların yatay (ana eksen) yönde nasıl hizalanacağını belirler (flex-start, flex-end, center, space-between, space-around veya space-evenly).

- align-items: Flex Container içindeki elemanların dikey (çapraz eksen) yönde nasıl hizalanacağını belirler (flex-start, flex-end, center, baseline veya stretch).

- align-content: Birden fazla satırı olan Flex Container'ın dikey yönde nasıl hizalanacağını belirler (flex-start, flex-end, center, space-between, space-around veya stretch).

IV. Flex Items İçin Özellikler

Bir Flex Item'ı oluşturmak için kullanılan temel özellikler şunlardır:

- order: Flex Item'ın sıralanma önceliğini belirler (-1, 0, 1, 2,...).

- flex-grow: Flex Item'ın diğer öğelere göre ne kadar büyüyeceğini belirler (0 veya pozitif bir sayı).

- flex-shrink: Flex Item'ın diğer öğelerle çakıştığında ne kadar küçüleceğini belirler (0 veya pozitif bir sayı).

- flex-basis: Flex Item'ın başlangıç genişliğini belirler (auto, px, %, em, vb.).

- flex: flex-grow, flex-shrink ve flex-basis özelliklerini tek bir özellik olarak belirlemek için kullanılır.

- align-self: Bir Flex Item'ın dikey yönde nasıl hizalanacağını belirler (auto, flex-start, flex-end, center, baseline veya stretch).

V. Örnekler

<!DOCTYPE html>
<html>
<head>
    <style>
        .flex-container {
            display: flex;
            flex-direction: row; /* Satır yönlü hizalama */
            justify-content: space-around; /* Yatayda ortalama hizalama */
            align-items: center; /* Dikeyde merkezi hizalama */
            height: 300px;
            background-color: #E3E3E3;
        }

        .flex-item {
            width: 100px;
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="flex-container">
        <div class="flex-item">1</div>
        <div class="flex-item">2</div>
        <div class="flex-item">3</div>
    </div>
</body>
</html> 
Hizalama ve Sıralama

Bu örnek, bir Flex Container içindeki Flex Items'ları farklı hizalama ve sıralamalarla nasıl düzenleyeceğimizi gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .flex-container {
            display: flex;
            justify-content: space-between; /* Yatayda elemanları kenarlara hizalama */
            align-items: center; /* Dikeyde elemanları merkezi hizalama */
            height: 300px;
            background-color: #E3E3E3;
        }

        .flex-item {
            width: 100px;
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }

        .flex-item:nth-child(2) {
            order: 1; /* Orta sıraya taşıma */
        }

        .flex-item:nth-child(3) {
            order: -1; /* En önceki sıraya taşıma */
        }
    </style>
</head>
<body>
    <div class="flex-container">
        <div class="flex-item">1</div>
        <div class="flex-item">2 (Orta)</div>
        <div class="flex-item">3 (Başlangıç)</div>
    </div>
</body>
</html>
Esnek Genişlik

Bu örnek, Flex Items'ları esnek genişliklere sahip olarak düzenlemeyi ve farklı oranlarda genişlemesini gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .flex-container {
            display: flex;
            justify-content: space-between; /* Yatayda elemanları kenarlara hizalama */
            height: 300px;
            background-color: #E3E3E3;
        }

        .flex-item {
            flex: 1; /* Tüm Flex Items'ların eşit genişlikte olmasını sağlar */
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }

        .flex-item:nth-child(2) {
            flex: 2; /* Orta elemanın diğerlerinden 2 kat daha geniş olması */
        }
    </style>
</head>
<body>
    <div class="flex-container">
        <div class="flex-item">1</div>
        <div class="flex-item">2</div>
        <div class="flex-item">3</div>
    </div>
</body>
</html>
Satır ve Sütun Düzeni

Bu örnek, Flex Container'ı satır ve sütun düzeninde nasıl düzenleyeceğimizi gösterir.

<!DOCTYPE html>
<html>
<head>
    <style>
        .flex-container {
            display: flex;
            flex-wrap: wrap; /* Sütun düzeninde sıralanan elemanları alt satıra geçirme */
            justify-content: center; /* Yatayda elemanları merkezi hizalama */
            height: 300px;
            background-color: #E3E3E3;
        }

        .flex-item {
            width: 100px;
            height: 100px;
            background-color: #007BFF;
            color: #FFFFFF;
            text-align: center;
            line-height: 100px;
            font-size: 16px;
            border-radius: 5px;
        }

        @media (max-width: 600px) {
            .flex-item {
                flex-basis: 50%; /* 600 pikselden küçük ekranlarda elemanları yarı genişlikte sırala */
            }
        }
    </style>
</head>
<body>
    <div class="flex-container">
        <div class="flex-item">1</div>
        <div class="flex-item">2</div>
        <div class="flex-item">3</div>
    </div>
</body>
</html>